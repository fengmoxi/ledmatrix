import RPi.GPIO as GPIO
import time
 
delay = 0.000001
 
GPIO.setmode(GPIO.BCM)
red1_pin = 17
clock_pin = 3
a_pin = 7
b_pin = 8
c_pin = 9
d_pin = 10
latch_pin = 4
oe_pin = 2
WIDTH=64
HEIGHT=16 
mask = 0xff

GPIO.setup(red1_pin, GPIO.OUT)
GPIO.setup(clock_pin, GPIO.OUT)
GPIO.setup(a_pin, GPIO.OUT)
GPIO.setup(b_pin, GPIO.OUT)
GPIO.setup(c_pin, GPIO.OUT)
GPIO.setup(d_pin, GPIO.OUT)
GPIO.setup(latch_pin, GPIO.OUT)
GPIO.setup(oe_pin, GPIO.OUT)
 
displaybuf = bytearray([
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
    0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x00, 0x40, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x00, 0xE0, 0x0C, 0x0C, 0x6C, 0x6C, 0x6C, 0x60,
    0x01, 0xF0, 0x07, 0x8C, 0x6F, 0xEF, 0xEC, 0x60, 0x23, 0xF8, 0x00, 0xCC, 0x6C, 0x0C, 0x0C, 0x60,
    0x33, 0xF8, 0x0C, 0xCE, 0x6C, 0x6C, 0x6C, 0xE0, 0x3B, 0xF8, 0x07, 0x8F, 0xC7, 0xC7, 0xC7, 0xE0,
    0x3B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x0B, 0xF8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
])
 
digitals = bytearray([
  0x00, 0x1C, 0x36, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00, # 0
    0x00, 0x18, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, # 1
    0x00, 0x3E, 0x63, 0x63, 0x63, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x63, 0x7F, 0x00, 0x00, 0x00, 0x00, # 2
    0x00, 0x3E, 0x63, 0x63, 0x06, 0x1C, 0x06, 0x03, 0x03, 0x63, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, # 3
    0x00, 0x06, 0x0E, 0x1E, 0x36, 0x36, 0x66, 0x66, 0x7F, 0x06, 0x06, 0x1F, 0x00, 0x00, 0x00, 0x00, # 4
    0x00, 0x7F, 0x60, 0x60, 0x60, 0x7C, 0x76, 0x03, 0x03, 0x63, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, # 5
    0x00, 0x1E, 0x36, 0x60, 0x60, 0x7C, 0x76, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00, # 6
    0x00, 0x7F, 0x66, 0x66, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, # 7
    0x00, 0x3E, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x63, 0x63, 0x3E, 0x00, 0x00, 0x00, 0x00, # 8
    0x00, 0x1C, 0x36, 0x63, 0x63, 0x63, 0x37, 0x1F, 0x03, 0x03, 0x36, 0x3C, 0x00, 0x00, 0x00, 0x00, # 9
    0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00  # A

])

def clear():
    for i in range (0,WIDTH * HEIGHT / 8):
	displaybuf[i]=0x00
 
def bits_from_int(x):
    a_bit = x & 0x01
    b_bit = x & 0x02
    c_bit = x & 0x04
    d_bit = x & 0x08
    return (a_bit, b_bit, c_bit, d_bit)
 
def set_row(row):
    #time.sleep(delay)
    a_bit, b_bit, c_bit, d_bit = bits_from_int(row)
    GPIO.output(a_pin, a_bit)
    GPIO.output(b_pin, b_bit)
    GPIO.output(c_pin, c_bit)
    GPIO.output(d_pin, d_bit)
    #time.sleep(delay)
 
def scan():
    head = scan.row * (WIDTH / 8)
    for line in range(0,HEIGHT / 16):
        index = head
        head += WIDTH * 2
        for byte in range (0, WIDTH / 8):
          pixels = displaybuf[index]
	  index += 1
	  pixels = pixels ^ mask
	  for bit in range (0,8):
	    GPIO.output(clock_pin,0)
            GPIO.output(red1_pin, pixels & (0x80 >> bit))
            GPIO.output(clock_pin,1)

    GPIO.output(oe_pin, 1)
    set_row(scan.row)
    GPIO.output(latch_pin, 0)
    GPIO.output(latch_pin, 1)
    GPIO.output(latch_pin, 0)
    GPIO.output(oe_pin, 0)
    scan.row = (scan.row + 1) & 0x0F

def drawDigital(x , y , n):
  #if (n >= 10 or (0 != (x %8))): return
  index = y * (WIDTH / 8) + x / 8
  idxvalue = n * 16 
  for i in range (0,16):
    displaybuf[index]=digitals[idxvalue]
    index += WIDTH / 8
    idxvalue += 1
     
def drawRect(x1, y1, x2, y2, pixel):
    for x in range(x1, x2):
        for y in range(y1, y2):
            drawPoint(y,x, pixel)
 
 
def drawPoint( x , y , pixel):
   index = x / 8 + y * WIDTH / 8
   bit = x % 8 
   if (pixel):
     displaybuf[index] |= 0x80 >> bit
   else:
     displaybuf[index] &= ~(0x80 >> bit)

 
count = 0
pos = 0
scan.row = 0
while True:
    for i in range (0,500):
      scan()
    clear();
    drawRect(count,0,10,12,1)
    drawDigital(32,0,count+1)
    drawDigital(40,0,count)
    drawDigital(pos*8 ,0,10)
    count = (count + 1 ) & 0x7
    pos += 1
    if pos == 5: pos = 0
